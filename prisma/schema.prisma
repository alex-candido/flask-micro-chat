datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = 5
}

enum UserRole {
  ADMIN
  EDITOR
  CLIENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id String @id @default(uuid()) @map("_id")

  email      String  @unique @db.VarChar(150)
  username   String  @unique @db.VarChar(50)
  fullname   String? @db.VarChar(100)
  first_name String? @db.VarChar(100)
  last_name  String? @db.VarChar(100)
  password   String  @db.VarChar(255)
  avatar_url String?

  role   UserRole   @default(CLIENT)
  status UserStatus @default(ACTIVE)

  rooms    Room[]
  messages Message[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Member     Member[]
}

enum RoomStatus {
  ACTIVE
  INACTIVE
}

enum RoomType {
  PUBLIC
  PRIVATE
}

model Room {
  id String @id @default(uuid()) @map("_id")

  name String? @db.VarChar(100)

  status RoomStatus @default(ACTIVE)
  type   RoomType   @default(PRIVATE)

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  messages Message[]
  members  Member[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}

model Member {
  id String @id @default(uuid()) @map("_id")

  status MemberStatus @default(ACTIVE)

  user_id    String
  channel_id String

  user User @relation(fields: [user_id], references: [id])
  room Room @relation(fields: [channel_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum MessageStatus {
  ACTIVE
  INACTIVE
}

model Message {
  id String @id @default(uuid()) @map("_id")

  content   String  @db.Text
  image_url String? @db.VarChar(255)

  status MessageStatus @default(ACTIVE)

  user_id    String
  channel_id String

  user User? @relation(fields: [user_id], references: [id])
  room Room? @relation(fields: [channel_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
